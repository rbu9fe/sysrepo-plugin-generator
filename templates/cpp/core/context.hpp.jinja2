#pragma once

#include <string>
#include <optional>
#include <vector>
#include <map>
#include <algorithm>
#include <functional>

#include <libyang-cpp/Module.hpp>
#include <sysrepo-cpp/Connection.hpp>
#include <sysrepo-cpp/Session.hpp>
#include <sysrepo-cpp/utils/exception.hpp>
#include <srpcpp.hpp>

namespace core
{

/**
 * @brief API context.
 */
class ApiContext
{
public:
    /**
     * Constructor for API context.
     */
    ApiContext() = default;
    virtual ~ApiContext() = default;
};

/**
 * @brief Yang module with its features.
 */
struct YangModule
{
    const libyang::Module module;
    const std::map<std::string, bool, std::less<>> features;
};

/**
 * @brief Plugin context.
 */
class PluginContext : public srpc::BasePluginContext
{
public:
    /**
     * Constructor for plugin context.
     *
     * @param sess Plugin session from the plugin init callback.
     */
    // TODO: [generator] Add dependency injection objects to the constructor.
    explicit PluginContext( const std::shared_ptr<Sysrepo::Session> &sess )
        : srpc::BasePluginContext( sess )
    {
        /* Initialize the Yang model map with the feature list. */
        for ( const auto &yang_model : sess->getContext().modules() )
        {
            std::map<std::string, bool, std::less<>> features;
            std::ranges::transform(
                yang_model.features(), std::inserter( features, features.end() ),
                []( const auto &feature )
                {
                    return std::pair{ feature.name(), feature.isEnabled() };
                } );

            m_yang_modules.try_emplace( yang_model.name(), YangModule{ yang_model, features } );
        }
    }

    /**
     * Destructor for plugin context.
     */
    ~PluginContext() final = default;

    /**
     * Get the plugin name.
     *
     * @return Plugin name string.
     */
    constexpr const char *getPluginName() final
    {
        return "{{ plugin_name }}";
    }

    /**
     * @brief Get a compiled Yang module.
     */
    const libyang::Module &GetYangModule( const std::string &model ) const
    {
        return m_yang_modules.at( model ).module;
    }

    /**
     * @brief Check whether the incoming list of features is enabled for the given model.
     */
    bool FeaturesEnabled( const std::string &model, const std::vector<std::string> &features ) const
    {
        return std::ranges::all_of(
            features,
            [this, &model]( const std::string &feature )
            {
                return m_yang_modules.at( model ).features.at( feature );
            } );
    }

    /**
     * Get an API context.
     *
     * @param component The API component to get its context from, or @p std::nullopt to get the global API context.
     *
     * @return Context, or @p nullptr if not found.
     */
    std::shared_ptr<ApiContext> getApiContext( std::optional<std::string> component = std::nullopt ) const
    {
        if ( component )
        {
            if ( m_apiComponentCtx.contains( *component ) )
            {
                return m_apiComponentCtx.at( *component );
            }
            else
            {
                return nullptr;
            }
        }
        else
        {
            return m_apiGlobalCtx;
        }
    }

    /**
     * Set an API context (overwriting previous contents of the referred @p component, if existing).
     *
     * @param context   The context to store.
     * @param component The API component where @p context shall be stored, or @p std::nullopt to store as global API context.
     */
    void addApiContext(
        const std::shared_ptr<ApiContext> &context, std::optional<std::string> component = std::nullopt )
    {
        if ( component )
        {
            m_apiComponentCtx.insert_or_assign( *component, context );
        }
        else
        {
            m_apiGlobalCtx = context;
        }
    }

    /**
     * Delete an API context.
     *
     * @note This just removes the entry from the list but others may still have a valid reference to the shared object.
     *
     * @param component The API component to delete the context from, or @p std::nullopt to delete the global API context.
     */
    void removeApiContext( std::optional<std::string> component = std::nullopt )
    {
        if ( component )
        {
            m_apiComponentCtx.erase( *component );
        }
        else
        {
            m_apiGlobalCtx.reset();
        }
    }

    /**
     * @brief Set/reset the Sysrepo callback session.
     */
    void setSysrepoCallbackSession( const std::shared_ptr<Sysrepo::Session> &session )
    {
        m_callback_session = session;
    }

    /**
     * @brief Get the Sysrepo callback session.
     */
    const std::shared_ptr<Sysrepo::Session> &getSysrepoCallbackSession() const
    {
        return m_callback_session;
    }

    // TODO: [generator] Add getter functions for dependency injection objects here.

private:
    /* Map of interesting Yang models and their respective features. */
    std::map<std::string, YangModule, std::less<>> m_yang_modules;

    /* Arbitrary contexts owned by plugin's API. */
    std::shared_ptr<ApiContext> m_apiGlobalCtx; ///< Global API context
    std::map<std::string, std::shared_ptr<ApiContext>, std::less<>>
        m_apiComponentCtx; ///< API component specific context

    /* A sysrepo session that's valid only in the context of a sysrepo change callback carrying the not-yet committed data. */
    std::shared_ptr<Sysrepo::Session> m_callback_session{ nullptr };

    // TODO: [generator] Add dependency injection objects here.
};
} // namespace core