#include <array>

#include <signal.h>
#include <sysrepo.h>
#include <unistd.h>

#include "plugin.hpp"

static bool exit_application = false;

static void sigint_handler( int signum );

int main( void )
{
    int error = SR_ERR_OK;
    sr_conn_ctx_t *connection = nullptr;
    sr_session_ctx_t *session = nullptr;
    void *private_data = nullptr;

    /* connect to sysrepo */
    error = sr_connect( SR_CONN_DEFAULT, &connection );
    if ( error )
    {
        DBGLOG( "sr_connect error (%d): %s", error, sr_strerror( error ) );
        goto out;
    }

    error = sr_session_start( connection, SR_DS_RUNNING, &session );
    if ( error )
    {
        DBGLOG( "sr_session_start error (%d): %s", error, sr_strerror( error ) );
        goto out;
    }

    error = sr_plugin_init_cb( session, &private_data );
    if ( error )
    {
        DBGLOG( "sr_plugin_init_cb error" );
        goto out;
    }

    signal( SIGINT, sigint_handler );
    signal( SIGTERM, sigint_handler );
    signal( SIGPIPE, SIG_IGN );
    while ( !exit_application )
    {
        sleep( 1 );
    }

    DBGLOG( "Shutting down..." );

out:
    sr_plugin_cleanup_cb( session, private_data );
    sr_session_stop( session );
    sr_disconnect( connection );

    return error ? -1 : 0;
}

static void sigint_handler( __attribute__( ( unused ) ) int signum )
{
    exit_application = true;
}