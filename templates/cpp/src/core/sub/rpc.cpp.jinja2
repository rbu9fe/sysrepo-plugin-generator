#include "rpc.hpp"

namespace {{root_namespace}} {
namespace sub::rpc {
{% for cb in rpc_callbacks %}
/**
* sysrepo-plugin-generator: Generated default constructor.
*
* @param ctx Plugin RPC context.
*
*/
{{to_camel_case(cb.sufix, True)}}RpcCb::{{to_camel_case(cb.sufix, True)}}RpcCb(std::shared_ptr<{{root_namespace}}::RpcContext> ctx)
{
    m_ctx = ctx;
}

/**
 * sysrepo-plugin-generator: Generated RPC/action operator() for path {{cb.path}}.
 *
 * A callback for RPC/action subscriptions.
 * @param session An implicit session for the callback.
 * @param subscriptionId ID the subscription associated with the callback.
 * @param path Path identifying the RPC/action.
 * @param input Data tree specifying the input of the RPC/action.
 * @param requestId Request ID unique for the specific module_name. Connected events for one request (SR_EV_CHANGE and
 * @param output A handle to a tree. The callback is supposed to fill this tree with output data (if there are any).
 * Points to the operation root node.
 *
 * @return Error code.
 *
 */
sr::ErrorCode {{to_camel_case(cb.sufix, True)}}RpcCb::operator()(sr::Session session, uint32_t subscriptionId, std::string_view path, const ly::DataNode input, sr::Event event, uint32_t requestId, ly::DataNode output)
{
    sr::ErrorCode error = sr::ErrorCode::Ok;
    return error;
}


{% endfor %}
}
}